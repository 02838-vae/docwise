import streamlit as st
from docx import Document
from docx.enum.text import WD_COLOR_INDEX
import re

# =========================
# H√†m ƒë·ªçc d·ªØ li·ªáu t·ª´ file Word, chia theo ph·ª• l·ª•c
# =========================
def load_questions(file_path):
    doc = Document(file_path)
    sections = {"Chung": []}
    current_section = "Chung"
    current_q = None

    for para in doc.paragraphs:
        text = para.text.strip()
        if not text:
            continue

        # Nh·∫≠n di·ªán ti√™u ƒë·ªÅ ph·ª• l·ª•c
        if text.lower().startswith("ph·ª• l·ª•c"):
            if current_q:
                sections[current_section].append(current_q)
                current_q = None
            current_section = text
            if current_section not in sections:
                sections[current_section] = []
            continue

        # Nh·∫≠n di·ªán c√¢u h·ªèi (b·∫Øt ƒë·∫ßu b·∫±ng s·ªë.)
        if re.match(r'^\d+\.', text):
            if current_q:
                sections[current_section].append(current_q)
            current_q = {"question": text, "options": []}
            continue

        # Nh·∫≠n di·ªán ƒë√°p √°n (A., B., C., D., E.)
        if current_q and re.match(r'^[A-E]\.', text):
            is_correct = any(
                run.font.highlight_color == WD_COLOR_INDEX.YELLOW
                for run in para.runs
            )
            current_q["options"].append({"text": text, "correct": is_correct})

    # Push c√¢u h·ªèi cu·ªëi c√πng
    if current_q:
        sections[current_section].append(current_q)

    return sections


# =========================
# App Streamlit
# =========================
def main():
    st.title("üìò B√†i ki·ªÉm tra tr·∫Øc nghi·ªám ti·∫øng Anh k·ªπ thu·∫≠t")

    sections = load_questions("docwise.docx")
    section_names = list(sections.keys())

    # Debug mode toggle
    debug = st.sidebar.checkbox("üîç Debug mode (hi·ªÉn th·ªã parser raw)")

    chosen_section = st.selectbox("üëâ B·∫°n mu·ªën l√†m ph·∫ßn n√†o?", [""] + section_names)

    if not chosen_section:
        st.info("H√£y ch·ªçn m·ªôt ph·ª• l·ª•c ƒë·ªÉ b·∫Øt ƒë·∫ßu.")
        return

    questions = sections[chosen_section]
    st.write(f"üîé ƒêang l√†m: **{chosen_section}** ({len(questions)} c√¢u h·ªèi)")

    # N·∫øu b·∫≠t debug mode th√¨ ch·ªâ hi·ªÉn th·ªã k·∫øt qu·∫£ parse
    if debug:
        st.subheader("üõ† K·∫øt qu·∫£ parser ƒë·ªçc ƒë∆∞·ª£c:")
        for i, q in enumerate(questions, start=1):
            st.write(f"**{i}. {q['question']}**")
            for opt in q["options"]:
                if opt["correct"]:
                    st.write(f"‚úÖ {opt['text']}")
                else:
                    st.write(f"‚ùå {opt['text']}")
        return  # Kh√¥ng hi·ªán form l√†m b√†i n·ªØa

    # B√¨nh th∆∞·ªùng th√¨ hi·ªÉn th·ªã form l√†m b√†i
    with st.form("quiz_form"):
        answers = {}
        for i, q in enumerate(questions):
            st.subheader(q["question"])
            options = [opt["text"] for opt in q["options"]]
            answers[i] = st.radio(
                "Ch·ªçn ƒë√°p √°n:",
                options,
                index=None,
                key=f"{chosen_section}_q{i}"
            )

        submitted = st.form_submit_button("‚úÖ N·ªôp b√†i")

    if submitted:
        score = 0
        results = []

        for i, q in enumerate(questions):
            if not q["options"]:
                continue
            correct_ans = next(opt["text"] for opt in q["options"] if opt["correct"])
            user_ans = answers[i]

            if user_ans == correct_ans:
                score += 1
                results.append((q["question"], True, user_ans, correct_ans))
            else:
                results.append((q["question"], False, user_ans, correct_ans))

        st.success(f"üéØ K·∫øt qu·∫£: {score}/{len(questions)} c√¢u ƒë√∫ng")

        st.subheader("üìã Chi ti·∫øt k·∫øt qu·∫£:")
        for q_text, is_correct, user_ans, correct_ans in results:
            if is_correct:
                st.write(f"‚úÖ {q_text} ‚Üí ƒê√∫ng ({user_ans})")
            else:
                st.write(f"‚ùå {q_text} ‚Üí Sai. B·∫°n ch·ªçn: {user_ans}. ƒê√°p √°n ƒë√∫ng: {correct_ans}")


if __name__ == "__main__":
    main()

import streamlit as st
from docx import Document
from docx.enum.text import WD_COLOR_INDEX

# =========================
# H√†m ƒë·ªçc d·ªØ li·ªáu t·ª´ file Word v√† chia theo ph·ª• l·ª•c
# =========================
def load_questions(file_path):
    doc = Document(file_path)
    sections = {}
    current_section = "Chung"
    current_q = None

    for para in doc.paragraphs:
        text = para.text.strip()
        if not text:
            continue

        # Nh·∫≠n di·ªán ti√™u ƒë·ªÅ ph·ª• l·ª•c
        if text.lower().startswith("ph·ª• l·ª•c"):
            current_section = text
            if current_section not in sections:
                sections[current_section] = []
            continue

        # Nh·∫≠n di·ªán c√¢u h·ªèi
        if text.lower().startswith("choose") or text.endswith("?"):
            if current_q:
                sections[current_section].append(current_q)
            current_q = {"question": text, "options": []}
            continue

        # Nh·∫≠n di·ªán ƒë√°p √°n
        if current_q:
            is_correct = any(
                run.font.highlight_color == WD_COLOR_INDEX.YELLOW
                for run in para.runs
            )
            current_q["options"].append({"text": text, "correct": is_correct})

    # Th√™m c√¢u h·ªèi cu·ªëi c√πng
    if current_q:
        sections[current_section].append(current_q)

    return sections


# =========================
# App Streamlit
# =========================
def main():
    st.title("üìò B√†i ki·ªÉm tra tr·∫Øc nghi·ªám ti·∫øng Anh k·ªπ thu·∫≠t")

    # Load ng√¢n h√†ng c√¢u h·ªèi
    sections = load_questions("docwise.docx")
    section_names = list(sections.keys())

    # Ng∆∞·ªùi d√πng ch·ªçn ph·∫ßn mu·ªën l√†m
    st.sidebar.header("Ch·ªçn ph·∫ßn thi")
    chosen_section = st.sidebar.selectbox("B·∫°n mu·ªën l√†m ph·∫ßn n√†o?", section_names)

    if not chosen_section:
        st.warning("H√£y ch·ªçn m·ªôt ph·ª• l·ª•c ·ªü thanh b√™n tr√°i!")
        return

    questions = sections[chosen_section]
    st.write(f"üîé B·∫°n ƒëang l√†m: **{chosen_section}** ({len(questions)} c√¢u h·ªèi)")

    # L∆∞u ƒë√°p √°n trong session_state ƒë·ªÉ kh√¥ng b·ªã reset khi ch·ªçn
    if "answers" not in st.session_state:
        st.session_state["answers"] = {}

    # Hi·ªÉn th·ªã c√¢u h·ªèi
    for i, q in enumerate(questions):
        st.subheader(f"C√¢u {i+1}: {q['question']}")
        options = [opt["text"] for opt in q["options"]]
        st.session_state["answers"][i] = st.radio(
            "Ch·ªçn ƒë√°p √°n:",
            options,
            index=None,
            key=f"{chosen_section}_q{i}"
        )

    # N√∫t n·ªôp b√†i
    if st.button("‚úÖ N·ªôp b√†i"):
        score = 0
        results = []

        for i, q in enumerate(questions):
            correct_ans = next(opt["text"] for opt in q["options"] if opt["correct"])
            user_ans = st.session_state["answers"].get(i)

            if user_ans == correct_ans:
                score += 1
                results.append((i + 1, True, user_ans, correct_ans))
            else:
                results.append((i + 1, False, user_ans, correct_ans))

        # K·∫øt qu·∫£ t·ªïng
        st.success(f"üéØ K·∫øt qu·∫£: {score}/{len(questions)} c√¢u ƒë√∫ng")

        # Chi ti·∫øt t·ª´ng c√¢u
        st.subheader("üìã Chi ti·∫øt k·∫øt qu·∫£:")
        for q_num, is_correct, user_ans, correct_ans in results:
            if is_correct:
                st.write(f"‚úÖ C√¢u {q_num}: ƒê√∫ng ({user_ans})")
            else:
                st.write(f"‚ùå C√¢u {q_num}: Sai. B·∫°n ch·ªçn: {user_ans}. ƒê√°p √°n ƒë√∫ng: {correct_ans}")


if __name__ == "__main__":
    main()
